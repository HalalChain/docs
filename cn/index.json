[
{
	"uri": "https://qitmeer.github.io/docs/cn/reference/qxtools/",
	"title": "Qx 工具集",
	"tags": [],
	"description": "",
	"content": " qx user guide qx是一个命令行工具，它是bx命令的超集，为密钥管理和事务构造提供了各种命令。\nPrerequisites Update Go to version at least 1.12 (required \u0026gt;= 1.12)\nCheck your golang version\n~ go version go version go1.12 darwin/amd64  How to build ~ mkdir -p /tmp/work ~ cd /tmp/work ~ git clone https://github.com/Qitmeer/qx.git ~ cd qx ~ go build ~ ./qx --version Qx Version : \u0026quot;0.0.1\u0026quot;  qx Commands ~ qx Usage: qx [--version] [--help] \u0026lt;command\u0026gt; [\u0026lt;args\u0026gt;] encode and decode : base58-encode encode a base16 string to a base58 string base58-decode decode a base58 string to a base16 string base58check-encode encode a base58check string base58check-decode decode a base58check string base64-encode encode a base16 string to a base64 string base64-encode encode a base64 string to a base16 string rlp-encode encode a string to a rlp encoded base16 string rlp-decode decode a rlp base16 string to a human-readble representation hash : blake2b256 calculate Blake2b 256 hash of a base16 data. blake2b512 calculate Blake2b 512 hash of a base16 data. sha256 calculate SHA256 hash of a base16 data. sha3-256 calculate SHA3 256 hash of a base16 data. keccak-256 calculate legacy keccak 256 hash of a bash16 data. blake256 calculate blake256 hash of a base16 data. ripemd160 calculate ripemd160 hash of a base16 data. bitcion160 calculate ripemd160(sha256(data)) hash160 calculate ripemd160(blake2b256(data)) entropy (seed) \u0026amp; mnemoic \u0026amp; hd \u0026amp; ec entropy generate a cryptographically secure pseudorandom entropy (seed) hd-new create a new HD(BIP32) private key from an entropy (seed) hd-to-ec convert the HD (BIP32) format private/public key to a EC private/public key hd-to-public derive the HD (BIP32) public key from a HD private key hd-decode decode a HD (BIP32) private/public key serialization format hd-derive Derive a child HD (BIP32) key from another HD public or private key. mnemonic-new create a mnemonic world-list (BIP39) from an entropy mnemonic-to-entropy return back to the entropy (the random seed) from a mnemonic world list (BIP39) mnemonic-to-seed convert a mnemonic world-list (BIP39) to its 512 bits seed ec-new create a new EC private key from an entropy (seed). ec-to-public derive the EC public key from an EC private key (the compressed format by default ) ec-to-wif convert an EC private key to a WIF, associates with the compressed public key by default. wif-to-ec convert a WIF private key to an EC private key. wif-to-public derive the EC public key from a WIF private key. addr \u0026amp; tx \u0026amp; sign ec-to-addr convert an EC public key to a paymant address. default is nox address tx-encode encode a unsigned transaction. tx-decode decode a transaction in base16 to json format. tx-sign sign a transactions using a private key. msg-sign create a message signature msg-verify validate a message signature signature-decode decode a ECDSA signature  Encoding Commands Encode/Decocde Qitmeer address \u0026amp; private/pubkey\nbase58-encode  encode a base16 string to a base58 string  Example ~ qx base58-decode RmCYoUMqKZopUkai2YhUFHR9UeqjeyjTAgW  # base16 string 0df144d959afb6db4ad730a6e2c0daf46ceeb98c53a059cd6527  base58-decode  decode a base58 string to a base16 string  Example ~ qx base58-decode 1234567890abcdef  # base58 string 43c9JGZmRvE  base58check-encode  base16 string into Qitmeer or BTC address.\n~ qx base58check-encode Usage: qx base58check-encode [-v \u0026lt;ver\u0026gt;] [hexstring] -a string base58check hasher -c int base58check checksum size (default 4) -v version base58check version [mainnet|testnet|privnet|btcmainnet|btctestnet|btcregressionnet] (default privnet)   Example # create qitmeer privnet address by base16 ~ qx base58check-encode c1c3092d17c917c2799c041aeaeac18822772149 # base58 string RmPwHCuC2m6gvz9TnVLapHySk1ZU72FTSru  # create btc testnet address by base16 ~ qx base58check-encode -v btctestnet c1c3092d17c917c2799c041aeaeac18822772149 # base58 string myBUMQTmZGK8yKLDranjSQEHbCYCaaywQD  "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/test/",
	"title": "测试字体显示和 语法高亮",
	"tags": [],
	"description": "",
	"content": " To be, or not to be, Ay there's the point, To Die, to sleep, is that all? Aye all: No, to sleep, to dream, aye marry there it goes, For in that dream of death, when we awake, And borne before an everlasting Judge, From whence no passenger ever returned, The undiscovered country, at whose sight The happy smile, and the accursed damn'd. But for this, the joyful hope of this, Who'd bear the scorns and flattery of the world, Scorned by the right rich, the rich cursed of the poor? The widow being oppressed, the orphan wrong'd, The taste of hunger, or a tyrants reign, And thousand more calamities besides, To grunt and sweat under this weary life, When that he may his full Quietus make, With a bare bodkin, who would this endure, But for a hope of something after death? Which puzzles the brain, and doth confound the sense, Which makes us rather bear those evils we have, Than fly to others that we know not of. Aye that, O this conscience makes cowards of us all, Lady in thy orizons, be all my sins remembered.\n \u0026quot;To be, or not to be\u0026quot; is one of the most widely known and quoted lines in modern English, and the soliloquy has been referenced in innumerable works of theatre, literature and music.\n 春眠不觉晓，处处闻啼鸟。 夜来风雨声，花落知多少。\n 春眠不觉晓，处处闻啼鸟。 夜来风雨声，花落知多少。\n移舟泊烟渚#  日暮客愁新## 野旷天低树## 江清月近人## 江清月近人##  独上高楼望尽天涯路。 衣带渐宽终不悔，为伊消得人憔悴。 众里寻他千百度，暮然回首，那人正在灯火阑珊处。   昔我往矣，杨柳依依。今我来思，雨雪霏霏。 蒹葭（jiān jiā）苍苍，白露为霜。 所谓伊人，在水一方。 彼采葛兮，一日不见，如三月兮。彼采萧兮，一日不见，如三秋兮。彼采艾兮，一日不见，如三岁兮。  Test for headline h1 The quick brown fox jumps over the lazy dog\nTest for headline h2 The quick brown fox jumps over the lazy dog\nTest for headline h3 The quick brown fox jumps over the lazy dog\nTest for headline h4 The quick brown fox jumps over the lazy dog\nTest for headline h5 The quick brown fox jumps over the lazy dog\nTest for Text highlight Note: github don't support ==hightlight== markdown. we need to use a html 5 \u0026lt;mark\u0026gt;\n 彼采葛兮，一日不见，如三月兮。 彼采萧兮，一日不见，如三秋兮。 彼采艾兮，一日不见，如三岁兮。  Test for picture  open Keynote or Pages (instructions same after this point) Select a template. The background does not matter but white shows your work better Drag or paste in your screenshot. Note: Using control+⌘+shift+4 you can send your screenshot directly to the clipboard. Apply a drop shadow to your image Select and copy just the image and paste it into your email or desired location.  \nStackexchange Question : Screenshot of selected area with shadow\nAdd Shadow by using script #!/bin/bash convert \u0026quot;$1\u0026quot; -trim \\( +clone -background grey25 -shadow 80x40+5+30 \\) +swap -background transparent -layers merge +repage \u0026quot;$1-shadow.png\u0026quot;  The best thing is transparent drop shadow around the window without the white border.\nThe script from here\nYou might need to brew install imagemagick before using it.\n fig.1 - Before adding the shadow\n fig.2 - 阴影效果添加之后\nCreate favicon.ico convert favicon.png -define icon:auto-resize=64,48,32,16 favicon.ico  The code form here\nTest syntax highlighting go pckage main import ( \u0026quot;fmt\u0026quot; \u0026quot;time\u0026quot; ) func readword(ch chan string) { fmt.Println(\u0026quot;Type a word, then hit Enter.\u0026quot;) var word string fmt.Scanf(\u0026quot;%s\u0026quot;, \u0026amp;word) ch \u0026lt;- word } func timeout(t chan bool) { time.Sleep(5 * time.Second) t \u0026lt;- true } func main() { t := make(chan bool) go timeout(t) ch := make(chan string) go readword(ch) select { case word := \u0026lt;-ch: fmt.Println(\u0026quot;Received\u0026quot;, word) case \u0026lt;-t: fmt.Println(\u0026quot;Timeout.\u0026quot;) } }  Bash [ -r ~/.profile ] \u0026amp;\u0026amp; . ~/.profile # set up environment, once, Bourne-sh syntax only if [ -n \u0026quot;$PS1\u0026quot; ] ; then # are we interactive? [ -r ~/.bashrc ] \u0026amp;\u0026amp; . ~/.bashrc # tty/prompt/function setup for interactive shells [ -r ~/.bash_login ] \u0026amp;\u0026amp; . ~/.bash_login # any at-login tasks for login shell only fi # End of \u0026quot;if\u0026quot; block  JavaScript var counter = (function () { var i = 0; // private property return { // public methods get: function () { alert(i); }, set: function (value) { i = value; }, increment: function () { alert(++i); } }; })(); // module counter.get(); // shows 0 counter.set(6); counter.increment(); // shows 7 counter.increment(); // shows 8  HTML \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;MathJax TeX Test Page\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026quot;text/x-mathjax-config\u0026quot;\u0026gt; MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}}); \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; async src=\u0026quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_CHTML\u0026quot;\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; When $a \\ne 0$, there are two solutions to \\(ax^2 + bx + c = 0\\) and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Scala var correct = 0 var questions = 0 var heads = 0 var trials = 10000 // Let's run some trials (1 to trials).foreach { trial =\u0026gt; // toss a fair coin scala.util.Random.nextBoolean() match { case true =\u0026gt; // Heads was tossed. Wake on Monday. // Sleeping Beauty always bet Heads was tossed; // ... in this case, only once. questions += 1 correct += 1 heads += 1 case _ =\u0026gt; // Tails was tossed. Wake on Monday and Tuesday. // Sleeping Beauty always bet Heads was tossed; // ... in this case, it will bet both on Monday // and Tuesday. But it will fail! questions += 2 } } println(\u0026quot;Probability of SB being correct: \u0026quot; + correct.toDouble/questions) println(\u0026quot;Probability of Heads being tossed: \u0026quot; + heads.toDouble/trials)  Here's a sample run:\nProbability of SB being correct: 0.33636242148870776 Probability of Heads being tossed: 0.5034  Test for Tables    Lex noation Set Theory Symbols 概念     \\mid \\( \\mid \\)    \\lbrace \\( \\lbrace \\rbrace \\) 也能用\\{\\}   \\in \\( a \\in A \\) a属于A element of   \\notin \\( a \\notin A \\) 不属于   \\ni \\( \\ni \\) 也能用\\owns   \\varnothing \\( \\varnothing \\) 空集   \\subset \\( A \\subset B \\) A是B的子集   \\subseteq \\( A \\subseteq B \\) A是B的子集（一般用这个）   \\subsetneq \\( A \\subsetneq B \\) A是B的真子集 proper subset   \\supset \\( B \\supset A \\) B包含A   \\supseteq \\( B \\supseteq A \\) B包含A（一般用这个）include   \\supsetneq \\( B \\supsetneq A \\) B真包含A   \\cap \\( A \\cap B \\) A与B的交集，A交B Intersection   \\cup \\( A \\cup B \\) A与B的并集，A并B Union    Test for MathJax (Tex/LaTeX) \\[ \\lbrace x \\in X \\mid x  \\frac{1}{2} \\rbrace \\]\nWhen \\(a \\ne 0\\) there are two solutions to \\(ax^2 + bx + c = 0\\) and they are \\(x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\\)\nA note for MathJax when using single $ When using the single-dollar delimiters, ”... the cost is $2.50 for the first one, and $2.00 for each additional one ...” would cause the phrase “2.50 for the first one, and” to be treated as mathematics since it falls between dollar signs. For this reason, if you want to use single-dollars for in-line math mode, you must enable that explicitly in your configuration:\n\u0026lt;script type=\u0026quot;text/x-mathjax-config\u0026quot;\u0026gt; MathJax.Hub.Config({ tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]} }); \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; async src=\u0026quot;path-to-mathjax/MathJax.js?config=TeX-AMS_CHTML\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  There has been an extensive discussion on this topic, see more details in this page.\n"
},
{
	"uri": "https://qitmeer.github.io/docs/cn/tutorials/qitmeer-js/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " qitmeer-js 说明  安装\nnpm i qitmeer-js --save  导入\nconst qitmeer = require('qitmeer-js')  如何生成地址（随机数（助记词），私钥，公钥，地址）\nconst qitmeer = require('qitmeer-js') // 生成 随机数 npm i randombytes --save const randomBytes = require('randombytes') const secretKey = randomBytes(32) // \u0026lt;Buffer 3d 2b 7c e0 8b 12 be ed f3 12 88 2b bd fa 0d 58 22 ad 4c f2 b8 9a ad 84 24 2b 80 15 93 3d e6 16\u0026gt; secretKey.toString('hex') // 3d2b7ce08b12beedf312882bbdfa0d5822ad4cf2b89aad84242b8015933de616 // 生成公钥 const keyPair = qitmeer.ec.fromPrivateKey( secretKey ) const publicKey = keyPair.publicKey // \u0026lt;Buffer 02 6c 21 c3 28 5b 26 be ed 8b 5c 8b f1 36 c4 9d fb bb 28 cf 6e b6 de a7 79 81 47 b8 98 93 8c 8f dc\u0026gt; publicKey.toString('hex') // 026c21c3285b26beed8b5c8bf136c49dfbbb28cf6eb6dea7798147b898938c8fdc // 生成地址 // 设置网络 mainnet【主网】, testnet【测试】, privnet【私有】 const network = qitmeer.networks.mainnet const hash160 = qitmeer.hash.hash160(keyPair.publicKey) const p2pkhAddress = qitmeer.address.toBase58Check(hash160, network.pubKeyHashAddrId) // NmcMJfyzyKbuD9Jy7ZPL6AGCUz5nfPaXBbx  如何签名一个交易（单个utxo，多个utxo）\nconst UTXO = { \u0026quot;vin\u0026quot;: [ { \u0026quot;txid\u0026quot;: \u0026quot;d46a58fced5a05b1dc1f4450e1bdf09696291348a7eccec069ed59343ec35b4d\u0026quot;, \u0026quot;vout\u0026quot;: 2, \u0026quot;sequence\u0026quot;: 4294967295, \u0026quot;amountin\u0026quot;: 45000000000, \u0026quot;blockheight\u0026quot;: 1, \u0026quot;txindex\u0026quot;: 0, \u0026quot;scriptSig\u0026quot;: { \u0026quot;asm\u0026quot;: \u0026quot;3044022005422cf4f7a082fe931509b44aee54c3d3c80b1f0d43ed1483ffeb7248857fe402202b9c050ed0fbb9883c8ff98d8a48c33483b32ad776d6746365f9b8851e6dcda501 02abb13cd5260d3e9f8bc3db8687147ace7b6e5b63b061afe37d09a8e4550cd174\u0026quot;, \u0026quot;hex\u0026quot;: \u0026quot;473044022005422cf4f7a082fe931509b44aee54c3d3c80b1f0d43ed1483ffeb7248857fe402202b9c050ed0fbb9883c8ff98d8a48c33483b32ad776d6746365f9b8851e6dcda5012102abb13cd5260d3e9f8bc3db8687147ace7b6e5b63b061afe37d09a8e4550cd174\u0026quot; } }, { \u0026quot;txid\u0026quot;: \u0026quot;46a6d3d9e1ef552dc9b0eba147ea97e481654a2bccf59fd764652971cb4d9fdd\u0026quot;, \u0026quot;vout\u0026quot;: 2, \u0026quot;sequence\u0026quot;: 4294967295, \u0026quot;amountin\u0026quot;: 45000000000, \u0026quot;blockheight\u0026quot;: 2, \u0026quot;txindex\u0026quot;: 0, \u0026quot;scriptSig\u0026quot;: { \u0026quot;asm\u0026quot;: \u0026quot;3045022100be434e16f4c83947b1a19fefbf319b7170b280c9a0d89c0786624a83bda337910220395753153ab55b21d7041705c75f42778d7846a41ca5cbb5b033f875d20a9f1501 02abb13cd5260d3e9f8bc3db8687147ace7b6e5b63b061afe37d09a8e4550cd174\u0026quot;, \u0026quot;hex\u0026quot;: \u0026quot;483045022100be434e16f4c83947b1a19fefbf319b7170b280c9a0d89c0786624a83bda337910220395753153ab55b21d7041705c75f42778d7846a41ca5cbb5b033f875d20a9f15012102abb13cd5260d3e9f8bc3db8687147ace7b6e5b63b061afe37d09a8e4550cd174\u0026quot; } } ], \u0026quot;vout\u0026quot;: [ { \u0026quot;amount\u0026quot;: 89000000000, \u0026quot;scriptPubKey\u0026quot;: { \u0026quot;asm\u0026quot;: \u0026quot;OP_DUP OP_HASH160 69570a6c1fcb68db1b1c50b34960e714d42c7b9c OP_EQUALVERIFY OP_CHECKSIG\u0026quot;, \u0026quot;hex\u0026quot;: \u0026quot;76a91469570a6c1fcb68db1b1c50b34960e714d42c7b9c88ac\u0026quot;, \u0026quot;reqSigs\u0026quot;: 1, \u0026quot;type\u0026quot;: \u0026quot;pubkeyhash\u0026quot; } }, { \u0026quot;amount\u0026quot;: 990000000, \u0026quot;scriptPubKey\u0026quot;: { \u0026quot;asm\u0026quot;: \u0026quot;OP_DUP OP_HASH160 c693f8fbfe6836f1fb55579b427cfc4fd2014953 OP_EQUALVERIFY OP_CHECKSIG\u0026quot;, \u0026quot;hex\u0026quot;: \u0026quot;76a914c693f8fbfe6836f1fb55579b427cfc4fd201495388ac\u0026quot;, \u0026quot;reqSigs\u0026quot;: 1, \u0026quot;type\u0026quot;: \u0026quot;pubkeyhash\u0026quot; } } ], \u0026quot;blockheight\u0026quot;: 101, \u0026quot;confirmations\u0026quot;: 1 } const qitmeer = require('qitmeer-js') // 设置网络 mainnet【主网】, testnet【测试】, privnet【私有】 const network = qitmeer.networks.mainnet // 私钥 const secretKey = '3d2b7ce08b12beedf312882bbdfa0d5822ad4cf2b89aad84242b8015933de616' const keyPair = qitmeer.ec.fromPrivateKey( secretKey ) // 构造交易 const txb = qitmeer.txsign.newSigner( network ); // 设置打包时间，一般不用设置 txb.setLockTime(1573046495) UTXO.vin.map( {txid,txindex} =\u0026gt; { // txid: 交易id ， txindex: 交易序号 txb.addInput( txid,txindex); }) // 1 QIT = 100000000 MEER // 输入的 amount 总数减去输出总数等于手续费 txb.addOutput( 'NmcMJfyzyKbuD9Jy7ZPL6AGCUz5nfPaXBbx', 89900000000); txb.addOutput( 'NmbiHCrN796d74wXccqzqYHBLawn7NHyRX6', 80000000); utxo.map( (v,i) =\u0026gt; { txb.sign(i, keyPair); }) // 获取 交易体 const newTransaction = txb.build().toBuffer().toString('hex'); // 计算收费 const BigNumber = require('bignumber.js') function getFee( tx, speed = 'fast' ) { const size = tx.__tx.byteLength() const s = { fast: 2, normal: 1, slow: 0.6 } return BigNumber( size ).div(2).multipliedBy(5000).multipliedBy(s[speed]) }   "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/tutorials/qitmeer-rpc/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Qitmeer RPC 说明 以下rpc均可通过curl可进行调用  curl -k -u \u0026quot;admin:123\u0026quot; -X POST -H 'Content-Type: application/json' --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;getPeerInfo\u0026quot;,\u0026quot;params\u0026quot;:null,\u0026quot;id\u0026quot;:1}' http://127.0.0.1:1234 | jq  ###1. getBlockByOrder\n函数名：getBlockByOrder {order} {fullTx} 说明：  order:区块orderid，由于qitmeer采用DAG算法，区块的orderid会发生变动，该值并非是区块高度 fullTx: true/false,该值一般为true，\n{ \u0026quot;hash\u0026quot;: \u0026quot;40f714e882292041d5a02bc5286fc465d04ae84e7a784debe8e93fef7f7e14f6\u0026quot;, \u0026quot;txsvalid\u0026quot;: true, \u0026quot;confirmations\u0026quot;: 7784, \u0026quot;version\u0026quot;: 8, \u0026quot;weight\u0026quot;: 473, \u0026quot;height\u0026quot;: 11, \u0026quot;txRoot\u0026quot;: \u0026quot;e59a81ecd2d013adfb2c73068a672ef0805c0aa4877ef114b275829c863c5608\u0026quot;, \u0026quot;order\u0026quot;: 11, \u0026quot;transactions\u0026quot;: [ { \u0026quot;hex\u0026quot;: \u0026quot;010000000139d821f342cd463794ea5a2ae70f1059124d6398caf4197d6dc13798574cdd42ffffffffffffffff010042dc06030000001976a914883e0d08cf453696b756baabadae1da8ab3f227888ac000000000000000001435b086c0dd1ff9a9c865213353934363631323534373532303130353833362430633136653839622d393438372d343865622d396536332d656130646430663735373236\u0026quot;, \u0026quot;txid\u0026quot;: \u0026quot;e59a81ecd2d013adfb2c73068a672ef0805c0aa4877ef114b275829c863c5608\u0026quot;, \u0026quot;txhash\u0026quot;: \u0026quot;aaf2a2357b41950f27403e6f5841cfcd894b80f18fc724a8d4155c7a4706066f\u0026quot;, \u0026quot;size\u0026quot;: 157, \u0026quot;version\u0026quot;: 1, \u0026quot;locktime\u0026quot;: 0, \u0026quot;expire\u0026quot;: 0, \u0026quot;vin\u0026quot;: [ { \u0026quot;coinbase\u0026quot;: \u0026quot;5b086c0dd1ff9a9c865213353934363631323534373532303130353833362430633136653839622d393438372d343865622d396536332d656130646430663735373236\u0026quot;, \u0026quot;sequence\u0026quot;: 4294967295 } ], \u0026quot;vout\u0026quot;: [ { \u0026quot;amount\u0026quot;: 13000000000, \u0026quot;scriptPubKey\u0026quot;: { \u0026quot;asm\u0026quot;: \u0026quot;OP_DUP OP_HASH160 883e0d08cf453696b756baabadae1da8ab3f2278 OP_EQUALVERIFY OP_CHECKSIG\u0026quot;, \u0026quot;hex\u0026quot;: \u0026quot;76a914883e0d08cf453696b756baabadae1da8ab3f227888ac\u0026quot;, \u0026quot;reqSigs\u0026quot;: 1, \u0026quot;type\u0026quot;: \u0026quot;pubkeyhash\u0026quot;, \u0026quot;addresses\u0026quot;: [ \u0026quot;TmbNTwPm9aTN7TtStnJjrcjsaRJWm4gt3Fs\u0026quot; ] } } ], \u0026quot;blockhash\u0026quot;: \u0026quot;40f714e882292041d5a02bc5286fc465d04ae84e7a784debe8e93fef7f7e14f6\u0026quot;, \u0026quot;confirmations\u0026quot;: 7784 } ], \u0026quot;stateRoot\u0026quot;: \u0026quot;0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, \u0026quot;bits\u0026quot;: \u0026quot;1600000\u0026quot;, \u0026quot;difficulty\u0026quot;: 23068672, \u0026quot;pow\u0026quot;: { \u0026quot;pow_name\u0026quot;: \u0026quot;cuckaroo\u0026quot;, \u0026quot;pow_type\u0026quot;: 1, \u0026quot;nonce\u0026quot;: 3412159405, \u0026quot;proof_data\u0026quot;: { \u0026quot;edge_bits\u0026quot;: 24, \u0026quot;circle_nonces\u0026quot;: \u0026quot;81de0400ce680600790822004fe43f000f934200a9ac4500cd695800689a5e00c9566100a46670001d7c7100820276007c6c770089f47b0039847c0069327e0085647e00caa07e009a508c001082950052979a00c717a1005827ab00975faf004c93b5000852b600a3dfb600d8f0c500a6b0c60074cbcf007ec7d3003a23db0099bce000d752f20027bff2003492f50011a1f600bde2f700de98f900afc6f900932ffd00ed89fe00\u0026quot; } }, \u0026quot;timestamp\u0026quot;: \u0026quot;2019-11-02T18:13:50+08:00\u0026quot;, \u0026quot;parentroot\u0026quot;: \u0026quot;5f852ecc306c4ec7f792fbfb8f9d4b1e15b7c80cc4a4678f7ea28e1d3edb98f6\u0026quot;, \u0026quot;parents\u0026quot;: [ \u0026quot;5f852ecc306c4ec7f792fbfb8f9d4b1e15b7c80cc4a4678f7ea28e1d3edb98f6\u0026quot; ], \u0026quot;children\u0026quot;: [ \u0026quot;3df0e5bb739d7ac0e4d34f621514d485dff3a3c0be31c161cc891787172caade\u0026quot; ] }   ###2.getBlockByID\n函数名：getBlockByID {blockid} {fullTx} 说明：  blockid：所请求节点接收的区块顺序，节点内置id，与全网其他节点无关 fullTx：true/false，一般为true  ###3.getBlockCount\n函数名：getBlockCount 说明：无参数，获取区块数量 ###4.getMempool\n函数名：getMempool 说明：无参数，获取交易池交易 ###5.getPeerInfo\n函数名：getPeerInfo 说明：无参数，取邻近节点信息 ###6.getNodeInfo\n函数名：getNodeInfo 说明：无参数，获取该节点信息  { \u0026quot;UUID\u0026quot;: \u0026quot;d66d8f6d-c5c8-422a-befe-aa0b7ec3c5f1\u0026quot;, \u0026quot;version\u0026quot;: 70800, \u0026quot;protocolversion\u0026quot;: 12, \u0026quot;totalsubsidy\u0026quot;: 102856000000000, \u0026quot;graphstate\u0026quot;: { \u0026quot;tips\u0026quot;: [ \u0026quot;078f9626c4fc6b18dfc6698bddbeb212808f148f31ac0aa777829b56e5469929\u0026quot; ], \u0026quot;mainorder\u0026quot;: 7912, \u0026quot;mainheight\u0026quot;: 7816, \u0026quot;layer\u0026quot;: 7816 }, \u0026quot;timeoffset\u0026quot;: 0, \u0026quot;connections\u0026quot;: 5, \u0026quot;pow_diff\u0026quot;: { \u0026quot;blake2bd_diff\u0026quot;: 5.200604516135472e+63, \u0026quot;cuckaroo_diff\u0026quot;: 0.14814815, \u0026quot;cuckatoo_diff\u0026quot;: 2.86419753 }, \u0026quot;testnet\u0026quot;: true, \u0026quot;mixnet\u0026quot;: false, \u0026quot;confirmations\u0026quot;: 10, \u0026quot;coinbasematurity\u0026quot;: 720, \u0026quot;errors\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;modules\u0026quot;: [ \u0026quot;qitmeer\u0026quot;, \u0026quot;miner\u0026quot;, \u0026quot;test\u0026quot; ] }  结果说明：  confirmations：代表区块中非coinbase输出可用的最小确认数，凡是区块confirmations确认数大于该值的区块中的非coinbase输出可进行交易 coinbasematurity：代表区块coinbase输出可以用的最小确认数，凡是区块confirmations确认数大于该值的区块中的coinbase输出可进行交易的第一个条件，第二个条件是必须是蓝色区块，见rpc isBule  ###7.isBlue\n函数名：isBlue {blockhash} 说明：通过节点判断该块是否为蓝色区块  blockhash：需要查找额块hash  结果说明：  0:为红色区块，该块coinbase不能交易 1:为蓝色区块，该块的coinbase可以交易 2:还不能确定是蓝色或红色，待确认  ###8.getRawTransaction\n函数名：getRawTransaction {txid} 说明：通过txid获取交易  getRawTransaction 000000e4c6b7f5b89827711d412957bfff5c51730df05c2eedd1352468313eca { \u0026quot;hex\u0026quot;: \u0026quot;0100000001cf6849e307726cfd51ad93b994c4dcdc390b782ad34cfafbcacf47f17c639606ffffffffffffffff010042dc06030000001976a914883e0d08cf453696b756baabadae1da8ab3f227888ac000000000000000001435c08d0b7b3581e39345913363432373832353337303636343531353533362431613037373964612d616466352d346365392d613962652d626238613732636639333232\u0026quot;, \u0026quot;txid\u0026quot;: \u0026quot;df492c0f85fee7fd883c45dbb1bbbcec4bf2ea1e315f33aee0e27bddaede35c3\u0026quot;, \u0026quot;txhash\u0026quot;: \u0026quot;26f8a70736ef23ac4ba57c91563360ba44ec8c0b448c2b20d05ad5387040acaa\u0026quot;, \u0026quot;size\u0026quot;: 157, \u0026quot;version\u0026quot;: 1, \u0026quot;locktime\u0026quot;: 0, \u0026quot;expire\u0026quot;: 0, \u0026quot;vin\u0026quot;: [ { \u0026quot;coinbase\u0026quot;: \u0026quot;5c08d0b7b3581e39345913363432373832353337303636343531353533362431613037373964612d616466352d346365392d613962652d626238613732636639333232\u0026quot;, \u0026quot;sequence\u0026quot;: 4294967295 } ], \u0026quot;vout\u0026quot;: [ { \u0026quot;amount\u0026quot;: 13000000000, \u0026quot;scriptPubKey\u0026quot;: { \u0026quot;asm\u0026quot;: \u0026quot;OP_DUP OP_HASH160 883e0d08cf453696b756baabadae1da8ab3f2278 OP_EQUALVERIFY OP_CHECKSIG\u0026quot;, \u0026quot;hex\u0026quot;: \u0026quot;76a914883e0d08cf453696b756baabadae1da8ab3f227888ac\u0026quot;, \u0026quot;reqSigs\u0026quot;: 1, \u0026quot;type\u0026quot;: \u0026quot;pubkeyhash\u0026quot;, \u0026quot;addresses\u0026quot;: [ \u0026quot;TmbNTwPm9aTN7TtStnJjrcjsaRJWm4gt3Fs\u0026quot; ] } } ], \u0026quot;blockhash\u0026quot;: \u0026quot;3df0e5bb739d7ac0e4d34f621514d485dff3a3c0be31c161cc891787172caade\u0026quot;, \u0026quot;confirmations\u0026quot;: 7838 }  ###9.sendRawTransaction\n函数名：sendRawTransaction {sign_raw_tx} {allow_high_fee} 说明：发送交易  sign_raw_tx:签名后的交易 allow_high_fee：允许的最大交易费  例：  sendRawTransaction 0100000001ff5d53a7070fa9f0a9d12af729d2cbaf355ef1173c106a84cf9ef3a46bff03b202000000ffffffff01005504790a0000001976a914627777996288556166614462639988446255776688ac000000000000000001000000000000000000000000ffffffff6b483045022100dced4d67dd74647d0036077ee5b435838934377b1d296dd9da852772911e3be2022063dd346bd812a894968b8acacead7e7beff48947657a82f1e8f9c38876d4c905012103aba0a09f5b44138a46a2e5d26b8659923d84c4ba9437e22c3828cac43d0edb49 true  "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://qitmeer.github.io/docs/cn/",
	"title": "Qitmeer 技术文档",
	"tags": [],
	"description": "",
	"content": " Qitmeer 技术文档 Qitmeer/Meer 文档，开发手册，指南以及教程\n文档列表  Qx Tools  "
},
{
	"uri": "https://qitmeer.github.io/docs/cn/reference/",
	"title": "References",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://qitmeer.github.io/docs/cn/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://qitmeer.github.io/docs/cn/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "",
	"content": ""
}]